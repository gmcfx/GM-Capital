import { getDatabase, ref, onChildChanged, set, push, update, get } from 'firebase/database';
import { getAuth, onAuthStateChanged, User } from 'firebase/auth';

interface MarketData {
  symbol: string;
  bid_price: number;
  ask_price: number;
  timestamp: string;
}

interface Position {
  id: string;
  user_id: string;
  account_id: string;
  symbol: string;
  position_type: 'buy' | 'sell';
  volume: number;
  open_price: number;
  current_price: number;
  stop_loss?: number;
  take_profit?: number;
  profit_loss: number;
  status: 'open' | 'closed';
  opened_at: string;
  closed_at?: string;
  updated_at: string;
}

interface PositionData {
  symbol: string;
  position_type: 'buy' | 'sell';
  volume: number;
  open_price: number;
  stop_loss?: number;
  take_profit?: number;
}

class RealtimeTradingService {
  private positionListeners: Set<(positions: Position[]) => void> = new Set();
  private marketDataUnsubscribe: (() => void) | null = null;
  private positionsUnsubscribe: (() => void) | null = null;
  private currentUser: User | null = null;
  private db = getDatabase();
  private auth = getAuth();

  constructor() {
    this.setupAuthState();
  }

  private setupAuthState() {
    onAuthStateChanged(this.auth, (user) => {
      this.currentUser = user;
      if (user) {
        this.setupRealtimeSubscriptions();
      } else {
        this.cleanupSubscriptions();
      }
    });
  }

  private setupRealtimeSubscriptions() {
    // Setup market data listener
    this.marketDataUnsubscribe = onChildChanged(
      ref(this.db, 'market_data'),
      (snapshot) => {
        const symbol = snapshot.key as string;
        const marketData = snapshot.val() as MarketData;
        this.updatePositionPrices({ ...marketData, symbol });
      }
    );

    // Setup positions listener for current user
    if (this.currentUser) {
      const positionsRef = ref(this.db, `users/${this.currentUser.uid}/positions`);
      this.positionsUnsubscribe = onChildChanged(positionsRef, () => {
        this.notifyPositionListeners();
      });
    }
  }

  private cleanupSubscriptions() {
    if (this.marketDataUnsubscribe) {
      this.marketDataUnsubscribe();
      this.marketDataUnsubscribe = null;
    }
    
    if (this.positionsUnsubscribe) {
      this.positionsUnsubscribe();
      this.positionsUnsubscribe = null;
    }
  }

  private async updatePositionPrices(marketData: MarketData) {
    if (!this.currentUser) return;

    try {
      const positionsRef = ref(this.db, `users/${this.currentUser.uid}/positions`);
      const snapshot = await get(positionsRef);
      
      if (!snapshot.exists()) return;

      const updates: Record<string, any> = {};
      const positions: Position[] = [];

      snapshot.forEach((childSnapshot) => {
        const position = childSnapshot.val() as Position;
        if (position.symbol === marketData.symbol && position.status === 'open') {
          const currentPrice = position.position_type === 'buy' 
            ? marketData.bid_price 
            : marketData.ask_price;

          const priceDiff = position.position_type === 'buy'
            ? currentPrice - position.open_price
            : position.open_price - currentPrice;
          
          const pnl = priceDiff * position.volume * 100000;
          const positionPath = `users/${this.currentUser!.uid}/positions/${childSnapshot.key}`;
          
          updates[`${positionPath}/current_price`] = currentPrice;
          updates[`${positionPath}/profit_loss`] = pnl;
          updates[`${positionPath}/updated_at`] = new Date().toISOString();
          
          positions.push({ ...position, id: childSnapshot.key!, current_price: currentPrice, profit_loss: pnl });
        }
      });

      if (Object.keys(updates).length > 0) {
        await update(ref(this.db), updates);
        this.notifyPositionListeners();
      }
    } catch (error) {
      console.error('Error updating position prices:', error);
    }
  }

  async createPosition(positionData: PositionData) {
    if (!this.currentUser) throw new Error('User not authenticated');
    
    try {
      // Get user's demo account (simplified for demo)
      const accountId = 'demo-account-id';
      
      const newPosition: Position = {
        ...positionData,
        id: '', // Will be generated by Firebase
        user_id: this.currentUser.uid,
        account_id: accountId,
        current_price: positionData.open_price,
        profit_loss: 0,
        status: 'open',
        opened_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        closed_at: ''
      };

      const newPositionRef = push(ref(this.db, `users/${this.currentUser.uid}/positions`));
      await set(newPositionRef, newPosition);
      
      return { ...newPosition, id: newPositionRef.key };
    } catch (error) {
      console.error('Error creating position:', error);
      throw error;
    }
  }

  async closePosition(positionId: string) {
    if (!this.currentUser) throw new Error('User not authenticated');
    
    try {
      const positionRef = ref(this.db, `users/${this.currentUser.uid}/positions/${positionId}`);
      await update(positionRef, {
        status: 'closed',
        closed_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
      
      this.notifyPositionListeners();
    } catch (error) {
      console.error('Error closing position:', error);
      throw error;
    }
  }

  async getPositions(): Promise<Position[]> {
    if (!this.currentUser) return [];
    
    try {
      const positionsRef = ref(this.db, `users/${this.currentUser.uid}/positions`);
      const snapshot = await get(positionsRef);
      
      const positions: Position[] = [];
      snapshot.forEach((childSnapshot) => {
        const position = childSnapshot.val() as Position;
        if (position.status === 'open') {
          positions.push({ ...position, id: childSnapshot.key! });
        }
      });
      
      return positions.sort((a, b) => 
        new Date(b.opened_at).getTime() - new Date(a.opened_at).getTime()
      );
    } catch (error) {
      console.error('Error fetching positions:', error);
      return [];
    }
  }

  async getUserBalance(): Promise<number> {
    if (!this.currentUser) return 0;
    
    try {
      const balanceRef = ref(this.db, `users/${this.currentUser.uid}/balance`);
      const snapshot = await get(balanceRef);
      return snapshot.val() || 0;
    } catch (error) {
      console.error('Error fetching balance:', error);
      return 0;
    }
  }

  subscribeToPositions(callback: (positions: Position[]) => void) {
    this.positionListeners.add(callback);
    this.getPositions().then(callback);
    
    return () => {
      this.positionListeners.delete(callback);
    };
  }

  private async notifyPositionListeners() {
    const positions = await this.getPositions();
    this.positionListeners.forEach(listener => listener(positions));
  }

  destroy() {
    this.cleanupSubscriptions();
    this.positionListeners.clear();
  }
}

export const realtimeTradingService = new RealtimeTradingService();